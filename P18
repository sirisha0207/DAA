 #include <stdio.h>
#include <stdbool.h>

// Function to print all prime numbers up to a given limit using Sieve of Eratosthenes
void sieve_of_eratosthenes(int limit) {
    // Create a boolean array "prime[limit+1]" and initialize all entries as true.
    // A value in prime[i] will be false if i is not a prime, else true.
    bool prime[limit + 1];
    for (int i = 2; i <= limit; i++)
        prime[i] = true;

    // Traverse through all numbers up to the square root of the limit
    for (int p = 2; p * p <= limit; p++) {
        // If prime[p] is not changed, then it is a prime
        if (prime[p] == true) {
            // Updating all multiples of p to false indicating not prime
            for (int i = p * p; i <= limit; i += p)
                prime[i] = false;
        }
    }

    // Print all prime numbers
    printf("Prime numbers up to %d are:\n", limit);
    for (int p = 2; p <= limit; p++) {
        if (prime[p])
            printf("%d ", p);
    }
    printf("\n");
}

int main() {
    int limit;

    printf("Enter the limit to find all prime numbers up to: ");
    scanf("%d", &limit);

    sieve_of_eratosthenes(limit);

    return 0;
}
